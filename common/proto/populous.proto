syntax = "proto3";

import "empty.proto";

package populous;

// Exported interface for the Populous service.
service Populous {
  // Operations for creating, getting, and updating Faculty.
  rpc AddFaculty(FacultyCreation) returns (Faculty) {}
  rpc GetFaculty(GetFacultyRequest) returns (Faculty) {}
  rpc GetAllFaculty(Empty) returns (FacultyList) {}
  rpc UpdateFacultyDomesticTickets(DomesticTicketsRequest) returns (Faculty) {}
  rpc UpdateFacultyInternationalTickets(InternationalTicketsRequest) returns (Faculty) {}

  // Operations for creating, getting, and updating Applicants.
  rpc AddApplicant(Applicant) returns (Applicant) {}
  rpc GetApplicant(GetApplicantRequest) returns (Applicant) {}
  rpc GetAllApplicants(Empty) returns (ApplicantList) {}
}

// Personal information about either an Applicant or Faculty.
message PersonalInfo {
  string firstName = 1;
  string lastName = 2;
}

// Information associated with a Faculty response
message Faculty {
  int32 facultyId = 1;
  PersonalInfo personalInfo = 2;
  string department = 3;
  string type = 4;
  string email = 5;
  int32 domesticTickets = 6;
  int32 internationalTickets = 7;
}

// Information associated with creating a Faculty
message FacultyCreation {
  int32 facultyId = 1;
  PersonalInfo personalInfo = 2;
  string department = 3;
  string type = 4;
  string email = 5;
  string password = 6;
}

// Information associated with domestic ticket allocation for Faculty
message DomesticTicketsRequest {
  int32 facultyId = 1;
  int32 domesticTickets = 2;
}

// Information associated with international ticket allocation for Faculty
message InternationalTicketsRequest {
  int32 facultyId = 1;
  int32 internationalTickets = 2;
}

// Information associated with an Applicant.
message Applicant {
  int32 applicantId = 1;
  PersonalInfo personalInfo = 2;
}

// Faculty to retrieve.
message GetFacultyRequest {
  int32 facultyId = 1;
}

// Applicant to retrieve.
message GetApplicantRequest {
  int32 applicantId = 1;
}

// List of applicants
message ApplicantList {
  repeated Applicant applicants = 1;
}

// List of faculty
message FacultyList {
  repeated Faculty faculty = 1;
}
