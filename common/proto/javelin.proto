syntax = "proto3";

import "populous.proto";
import "empty.proto";

package javelin;

// Exported interface for the Javelin service.
service Javelin {
  // Retrieve a list of specific tickets based on ticketId or applicantId
  rpc GetTickets(GetTicketRequest) returns (TicketList) {}

  // Create a ticket in INITIAL state for a faculty member.
  rpc CreateTicket(CreateTicketRequest) returns (TicketList) {}

  // Update a specific ticket to a new state.
  rpc UpdateTicket(ModifyTicketRequest) returns (Ticket) {}

  // Delete a specific ticket
  rpc DeleteTicket(DeleteTicketRequest) returns (DeleteMessage) {}

  // Associate a specific applicant with a Ticket.
  rpc AssignApplicant(ModifyTicketRequest) returns (Ticket) {}

  // Add a Note to a Ticket.
  rpc AddNote(AddNoteRequest) returns (Ticket) {}

  // Update an existing Note.
  rpc UpdateNote(UpdateNoteRequest) returns (Note) {}

  // Delete an existing Note from a Ticket.
  rpc DeleteNote(DeleteNoteRequest) returns (DeleteMessage) {}
}

// Ticket resource.
message Ticket {
  string ticketId = 1;
  enum State {
    INITIAL = 0;
    GRANTED = 1;
    REQUESTED = 2;
    PENDING = 3;
    REFUSED = 4;
    ACCEPTED = 5;
  }
  enum Type {
    DOMESTIC = 0;
    INTERNATIONAL = 1;
  }
  Type type = 2;
  State state = 3;
  int32 applicantId = 4;
  int32 facultyId = 5;
  repeated Note notes = 6;
  int32 created = 7;
  int32 lastModified = 8;
}

// Note resource attached to Ticket.
message Note {
  string noteId = 1;
  string ticketId = 2;
  string text = 3;
  bool resolved = 4;
  int32 created = 5;
  int32 lastModified = 6;
}

message DeleteMessage {
  string message = 1;
}

// List used for retrieving all tickets.
message TicketList {
  repeated Ticket tickets = 1;
}

// Faculty information for creating an initial ticket.
message CreateTicketRequest {
  int32 facultyId = 1;
  int32 domesticTickets = 2;
  int32 internationalTickets = 3;
}

// Ticket to retrieve.
message GetTicketRequest {
  string ticketId = 1;
  int32 facultyId = 2;
  string state = 3;
  string type = 4;
}

// Ticket to retrieve.
message DeleteTicketRequest {
  string ticketId = 1;
}

// Note to Add
message AddNoteRequest {
  string ticketId = 1;
  string text = 2;
}

// Request message used specifically for UpdateNote call.
message UpdateNoteRequest {
  string ticketId = 1;
  string noteId = 2;
  bool resolved = 3;
}

// Request message used to delete note
message DeleteNoteRequest {
  string ticketId = 1;
  string noteId = 2;
}

// ModifyTicketRequest used for all requests related to changing ticket state.
message ModifyTicketRequest {
  string ticketId = 1;
  oneof change {
    Ticket.State state = 2;
    int32 applicantId = 3;
    Note note = 4;
    UpdateNoteRequest noteRequest = 5;
    string noteId = 6;
  }
}
